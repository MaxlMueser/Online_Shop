name: Deploy to ECS

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Run frontend tests
        working-directory: frontend
        run: npm test

      - name: Install backend dependencies
        working-directory: backend
        run: npm install

      - name: Run backend tests
        working-directory: backend
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: vars
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_FRONTEND }}:${{ steps.vars.outputs.tag }} ./frontend
          docker push ${{ secrets.ECR_REPOSITORY_FRONTEND }}:${{ steps.vars.outputs.tag }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_BACKEND }}:${{ steps.vars.outputs.tag }} ./backend
          docker push ${{ secrets.ECR_REPOSITORY_BACKEND }}:${{ steps.vars.outputs.tag }}

  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy frontend to ECS
        run: |
          TAG=${{ github.sha }}
          TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION_FRONTEND_STAGING }} --region ${{ vars.AWS_REGION }})
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY_FRONTEND }}:$TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_RESP=$(aws ecs register-task-definition --region ${{ vars.AWS_REGION }} --cli-input-json "$NEW_TASK_DEF")
          NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_STAGING }} --service ${{ vars.ECS_SERVICE_FRONTEND_STAGING }} --task-definition "$NEW_REVISION" --region ${{ vars.AWS_REGION }}
          aws ecs wait services-stable --cluster ${{ vars.ECS_CLUSTER_STAGING }} --services ${{ vars.ECS_SERVICE_FRONTEND_STAGING }} --region ${{ vars.AWS_REGION }}

      - name: Deploy backend to ECS
        run: |
          TAG=${{ github.sha }}
          TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION_BACKEND_STAGING }} --region ${{ vars.AWS_REGION }})
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY_BACKEND }}:$TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_RESP=$(aws ecs register-task-definition --region ${{ vars.AWS_REGION }} --cli-input-json "$NEW_TASK_DEF")
          NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_STAGING }} --service ${{ vars.ECS_SERVICE_BACKEND_STAGING }} --task-definition "$NEW_REVISION" --region ${{ vars.AWS_REGION }}
          aws ecs wait services-stable --cluster ${{ vars.ECS_CLUSTER_STAGING }} --services ${{ vars.ECS_SERVICE_BACKEND_STAGING }} --region ${{ vars.AWS_REGION }}

  deploy-production:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy frontend to ECS
        run: |
          TAG=${{ github.ref_name }}
          TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION_FRONTEND_PRODUCTION }} --region ${{ vars.AWS_REGION }})
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY_FRONTEND }}:$TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_RESP=$(aws ecs register-task-definition --region ${{ vars.AWS_REGION }} --cli-input-json "$NEW_TASK_DEF")
          NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} --service ${{ vars.ECS_SERVICE_FRONTEND_PRODUCTION }} --task-definition "$NEW_REVISION" --region ${{ vars.AWS_REGION }}
          aws ecs wait services-stable --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} --services ${{ vars.ECS_SERVICE_FRONTEND_PRODUCTION }} --region ${{ vars.AWS_REGION }}

      - name: Deploy backend to ECS
        run: |
          TAG=${{ github.ref_name }}
          TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION_BACKEND_PRODUCTION }} --region ${{ vars.AWS_REGION }})
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY_BACKEND }}:$TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_RESP=$(aws ecs register-task-definition --region ${{ vars.AWS_REGION }} --cli-input-json "$NEW_TASK_DEF")
          NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} --service ${{ vars.ECS_SERVICE_BACKEND_PRODUCTION }} --task-definition "$NEW_REVISION" --region ${{ vars.AWS_REGION }}
          aws ecs wait services-stable --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} --services ${{ vars.ECS_SERVICE_BACKEND_PRODUCTION }} --region ${{ vars.AWS_REGION }}
